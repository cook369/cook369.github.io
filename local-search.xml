<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>windows下nodejs安装</title>
    <link href="/2025/03/19/nodejs-install/"/>
    <url>/2025/03/19/nodejs-install/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文介绍windows下使用nvm安装nodejs</p><h2 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h2><ol><li>安装nvm，使用nvm安装稳定版的nodejs<br>进入<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows发布页面</a>，选择nvm-setup.exe安装。<br><img src="/img/nodejs-install/nvm-windows-%E4%B8%8B%E8%BD%BD.png"><br>安装完成后在终端输入nvm version，能查到版本号说明安装成功了<br><img src="/img/nodejs-install/nvm-version.png"></li></ol><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示已经安装的列表，list 可简化为 <span class="hljs-built_in">ls</span></span><br>nvm list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示远程可安装的列表，list 也可简化为 <span class="hljs-built_in">ls</span></span><br>nvm list available<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载指定版本 node</span><br>nvm uninstall [version]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用指定版本 node</span><br>nvm use [version]<br></code></pre></td></tr></table></figure><ol start="2"><li>配置nvm下载镜像<br>在 nvm 的安装路径下，找到 settings.txt，在后面加上这两行，设置国内淘宝镜像源：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node_mirror: https://npmmirror.com/mirrors/node/<br>npm_mirror: https://npmmirror.com/mirrors/npm/<br></code></pre></td></tr></table></figure><p>命令行版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">阿里云云镜像</span><br>nvm npm_mirror https://npmmirror.com/mirrors/npm/<br>nvm node_mirror https://npmmirror.com/mirrors/node/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">腾讯云镜像</span><br>nvm npm_mirror http://mirrors.cloud.tencent.com/npm/<br>nvm node_mirror http://mirrors.cloud.tencent.com/nodejs-release/<br></code></pre></td></tr></table></figure><p><img src="/img/nodejs-install/nvm-settings.png"></p><h2 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h2><ol start="3"><li>nodejs安装<br>使用<code>nvm install xxx</code>安装lts版本的noejs</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">22</span><br><span class="hljs-attribute">nvm</span> list<br><span class="hljs-attribute">nvm</span> use <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><img src="/img/nodejs-install/node-version.png"></p><ol start="4"><li>修改 npm 默认镜像源</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry http://registry.npmmirror.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查</span><br>npm config get registry<br></code></pre></td></tr></table></figure><ol start="5"><li>其他</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;%NVM_SYMLINK%\node_cache&quot;</span></span><br>npm config set cache &quot;D:\nvm\nodejs\node_cache&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;%NVM_SYMLINK%\node_global&quot;</span></span><br>npm config set prefix &quot;D:\nvm\nodejs\node_global&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可编辑 .npmrc 配置文件</span><br>npm config edit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看部分 .npmrc 配置信息</span><br>npm config ls<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
      <category>nvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 docker-compose 部署 code-server</title>
    <link href="/2025/03/14/code-server-deploy/"/>
    <url>/2025/03/14/code-server-deploy/</url>
    
    <content type="html"><![CDATA[<p>code-server 是社区创作的 Web 版 VS Code，后端运行在服务器中，开发者基于浏览器运行 IDE。</p><h2 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h2><p>docker-compose </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">code-server:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">codercom/code-server:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">code-server</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span> <span class="hljs-comment">#时区</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PASSWORD=PASSWORD</span> <span class="hljs-comment">#可选，改成你自己的密码 PASSWORD/HASHED_PASSWORD 至少要配置一个</span><br>        <span class="hljs-comment">#- HASHED_PASSWORD= #可选，非明文保存的密码，因为上面 Password 的密码会以配置文件形式保存在服务器内，所以 code-server 提供了一个非明文形式的密码。具体可以通过 echo -n &quot;password&quot; | npx argon2-cli -e 这个命令生成，这里就不细讲了</span><br>        <span class="hljs-comment">#- SUDO_PASSWORD=password #可选，如果用这里的密码会以 sudo 的方式登陆</span><br>        <span class="hljs-comment">#- SUDO_PASSWORD_HASH= #可选，同上</span><br>        <span class="hljs-comment">#- PROXY_DOMAIN=code-server.my.domain #可选，服务器绑定的域名</span><br>        <span class="hljs-comment">#- DEFAULT_WORKSPACE=/home/coder/project #可选，默认工作区</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-number">1000</span><span class="hljs-string">:1000</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./code-server:/home/coder/project</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>启动命令 <code>docker-compose up -d</code></p><h2 id="安装-python3"><a href="#安装-python3" class="headerlink" title="安装 python3"></a>安装 python3</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install python3 python3-dev<br><br></code></pre></td></tr></table></figure><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.kkgithub.com/nvm-sh/nvm/v0.40.2/install.sh | bash<br><span class="hljs-built_in">source</span> ~/.bashrc<br>nvm -v<br>nvm install --lts<br></code></pre></td></tr></table></figure><h2 id="安装-extension"><a href="#安装-extension" class="headerlink" title="安装 extension"></a>安装 extension</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">code-server --install-extension ms-python.python<br>code-server --install-extension mhutchie.git-graph<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://blog.csdn.net/kirigirihitomi/article/details/132859159">通过docker-compose配置code-server</a><br>[2] <a href="https://docs.linuxserver.io/images/docker-code-server/#docker-compose-recommended-click-here-for-more-info">code-server配置参考</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Harbar 安装出错</title>
    <link href="/2025/03/13/harbor/"/>
    <url>/2025/03/13/harbor/</url>
    
    <content type="html"><![CDATA[<h2 id="Harbar-安装出错"><a href="#Harbar-安装出错" class="headerlink" title="Harbar 安装出错"></a>Harbar 安装出错</h2><p>harboar启动失败，安装Harbor version：v2.9.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">popen failure: Cannot allocate memory<br>initdb: error: The program <span class="hljs-string">&quot;postgres&quot;</span> is needed by initdb but was not found <span class="hljs-keyword">in</span> the<br></code></pre></td></tr></table></figure><p>问题原因是docker版本过低，解决办法是升级docker版本大于20.10.10后即可解决。</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>最新的 glibc （2.33.9000，在 Fedora 35 rawhide 中）现在默认尝试使用 ‘clone3’。<br>为了实现向后兼容性，如果它看到 ENOSYS errno 将自动回退 “clone”。<br>任何其他 errno 都被视为致命的错误。<br>docker 安装的默认 seccomp 过滤器会导致 EPERM，因此这会中断 glibc 回退。因此程序无法生成线程和fork子进程。</p><h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>带有 libseccomp 的 Docker packages&#x2F;libs 中使用的较新的 syscall 被阻止。</p><h2 id="Secommp"><a href="#Secommp" class="headerlink" title="Secommp"></a>Secommp</h2><p>Secommp (SECure COMPuting) 是 Linux 内核 2.6.12 版本引入的安全模块，主要是用来限制某一进程可用的系统调用 (system call)。<br>它最初被用于 cpushare 这个项目，让人们可以出租自己空闲的 cpu cycle 来执行 untrusted code。<br>这个 feature 本身并不是一个沙盒 (sandbox)，它只是一种减少 Linux 内核暴露的机制，是构建一个安全的沙盒的重要组成部分。</p><h2 id="Docker-Secommp"><a href="#Docker-Secommp" class="headerlink" title="Docker Secommp"></a>Docker Secommp</h2><p>libseccomp 允许您为进程配置允许的系统调用。<br>Docker 为所有容器设置默认的 seccomp 配置文件，以便仅允许某些 syscall，而阻止其他所有内容（因此，libseccomp 或 docker 尚不知道的较新 syscall 将被阻止3）</p><p>docker每个容器默认都设置了一个seccomp profile，屏蔽掉了其中的44个系统调用。<br>docker会将seccomp传递给runc中的sepc.linux.seccomp。<br>可以通过—security-opt seccomp&#x3D;xxx来设置docker的seccomp策略，xxx为json格式的文件，其中定义了seccomp规则。<br>也可以通过–security-opt seccomp&#x3D;unconfined来关闭docker引入默认的seccomp规则的限制。</p><h1 id="Secommp-等导致的-operation-not-permitted-处理办法"><a href="#Secommp-等导致的-operation-not-permitted-处理办法" class="headerlink" title="Secommp 等导致的 operation not permitted 处理办法"></a>Secommp 等导致的 operation not permitted 处理办法</h1><ol><li>–security-opt seccomp&#x3D;unconfined来关闭docker引入默认的seccomp规则的限制</li><li>切换到较旧的映像， 如果 16 在移动到 Debian Bookworm 时开始失败，那么 16-bullseye 是一个有效的解决方法，直到主机可以更新为止。</li><li>更新主机docker版本</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/goharbor/harbor/issues/19141">DB init error: popen failure: Cannot allocate memory</a><br>[2] <a href="https://github.com/timescale/timescaledb-docker-ha/issues/260">Docker image fails during initdb </a><br>[3] <a href="https://github.com/moby/moby/pull/42681">seccomp: add support for “clone3” syscall in default policy</a><br>[4] <a href="https://github.com/moby/moby/issues/42680">seccomp filter breaks latest glibc (in fedora rawhide) by blocking clone3 with EPERM</a><br>[5] <a href="https://docs.docker.com/engine/security/seccomp/">Seccomp security profiles for Docker</a><br>[6] <a href="https://github.com/docker-library/official-images/issues/16829">“operation not permitted”, a libseccomp story </a><br>[7] <a href="https://github.com/docker-library/golang/issues/467">runtime&#x2F;cgo: pthread_create failed: Operation not permitted</a></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>secommp</tag>
      
      <tag>harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
